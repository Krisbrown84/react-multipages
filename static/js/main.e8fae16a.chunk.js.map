{"version":3,"sources":["components/Navbar.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","to","basketNumbers","Home","className","src","alt","onClick","myFunc","id","About","href","target","class","App","state","basket","addToBasket","console","log","setState","this","exact","path","render","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAmBeA,EAdA,SAACC,GACZ,OACI,6BACI,6BACA,uDACA,4BACA,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,aACJ,qCAAU,8BAAOD,EAAME,oBCgBpBC,G,MA1BF,SAAAH,GACX,OACE,yBAAKI,UAAU,QACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,yBACEC,IAAI,+DACJC,IAAI,qBAGR,yBAAKF,UAAU,aAAf,oBAEF,4BAAQG,QAASP,EAAMQ,QAAvB,eACA,uBAAGC,GAAG,SAAN,YACA,qKCAOC,G,MAfD,WACV,OACI,yBAAKN,UAAU,SACX,iDACA,+DAEA,2BAAG,uBAAGO,KAAK,iCAAiCC,OAAO,UAAhD,sBACH,yBAAKC,MAAM,kBACP,yBAAKA,MAAM,a,OCwBZC,E,4MA1BbC,MAAQ,CACNC,OAAQ,G,EAEVC,YAAc,WACZC,QAAQC,IAAI,oBAEZ,EAAKC,SAAS,CACZJ,OAAQ,EAAKD,MAAMC,OAAS,K,uDAGvB,IAAD,OACN,OACE,6BACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQd,cAAemB,KAAKN,MAAMC,SAElC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,CAAMhB,OAAQ,EAAKS,iBACvD,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,SAASE,UAAWf,W,GAnB9BgB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.e8fae16a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n            <h1>My React multipage site</h1>\r\n            <ul>\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/about\">about me</Link></li>\r\n            <li>Cart: <span>{props.basketNumbers}</span></li>\r\n            </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = props => {\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"card-container\">\r\n        <div className=\"card\">\r\n          <div className=\"side\">\r\n            <img\r\n              src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/29841/jimmy.jpg\"\r\n              alt=\"Jimmy Eat World\"\r\n            ></img>\r\n          </div>\r\n          <div className=\"side back\">Jimmy Eat World</div>\r\n        </div>\r\n        <button onClick={props.myFunc}>Add to Cart</button>\r\n        <p id=\"price\">Â£9.99</p>\r\n        <p>\r\n          Bleed American is the fourth studio album by American rock band Jimmy\r\n          Eat World, released on July 24, 2001, by DreamWorks Records.\r\n        </p>\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport './About.css';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"about\">\r\n            <h1>Kris Mouser-Brown</h1>\r\n            <p>Junior developer with CodeNation\r\n            </p>\r\n            <p><a href=\"https://github.com/Krisbrown84\" target=\"_blank\">My Github profile</a></p>\r\n            <div class=\"bird-container\">\r\n                <div class=\"bird\"></div>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default About\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport About from \"./components/About\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n\nclass App extends React.Component {\n  state = {\n    basket: 0\n  }\n  addToBasket = () => {\n    console.log(\"Adding to basket\");\n\n    this.setState({\n      basket: this.state.basket + 1\n    })\n  }\n  render(){\n    return (\n      <div>\n      <BrowserRouter>\n        <Navbar basketNumbers={this.state.basket}/>\n\n        <Switch>\n          <Route exact path=\"/\" render={() => <Home myFunc={this.addToBasket} />} />\n          <Route exact path=\"/about\" component={About}/>\n        </Switch>\n        \n      </BrowserRouter>\n      </div>\n      )\n    }\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}